\chapter{Verified Specialization}
\label{verified_specialization}
%

This chapter describes work done on the inlining specialization. It concentrates on the implementation of the specialization pass and the approach of introducing this optimization into the inlining pass. This optimization is not verified, the verification of this pass is left for future work.

\section{Goal}
\label{verified_specialization:goal}
%

The specialization optimization is slightly more complex than just inlining. Inlining is an optimization that substitutes \keyword{Let} bindings, whereas specialization uses \keyword{Letrec} --- recursive declarations. The main idea of specialization is to be able to create specialized versions of recursive functions near the call site. Considering the following example:

\begin{lstlisting}
letrec map = \f -> \lst -> case lst of
  [] -> []
  (x:xs) -> f x : map f xs
in
  let foo = (\x -> x + 1) 
  in map foo
\end{lstlisting}

The specialization pass would ideally create a copy of the definition of \keyword{map} and insert it near the call site with all possible arguments specialized. So for the given example, a specializing pass would produce the following code:

\begin{lstlisting}
letrec map = \f -> \lst -> case lst of
  [] -> []
  (x:xs) -> f x : map f xs
in
  let foo = (\x -> x + 1) 
  in 
    letrec map = \lst -> case lst of
      [] -> []
      (x:xs) -> foo x : map foo xs
    in map
\end{lstlisting}

Similarly to the inlining pass, this optimization should also only be used when the recursive function is immediately applied to an argument, otherwise the compiler would just end up adding extra code without any profit. That is also why the original binding should not be removed in this pass --- only copied.

\section{Specializing approach}
\label{verified_specialization:specializing_approach}
%

The use of specialization is accommodated by the inlining pass. When looking back at the definition of \keyword{list_subst_rel_LetrecInline}, it is precisely the case when specialization should be applied.

\begin{theorem}
\label{verified_specialization:specializing_approach:list_subst_rel_LetrecInline}
%
\begin{HOLmath}
  \HOLthm[]{pure_inline.list_subst_rel_LetrecInline}
\end{HOLmath}
%
\end{theorem}

This inlining case for any expression \keyword{x} performs inlining on it, with the result \keyword{y}, allows inserting a \keyword{Letrec} binding around the result and gives as the result any expression that is equivalent to \keyword{Letrec [(v,t)] y}. And so, if a specialization pass gives an equivalent output expression, it can be used during the inlining pass. Specialization can be split into two parts for a given term \keyword{f x}:

\begin{itemize}
  \item First inline the definition for \keyword{f}. This transformation could give the following code:
  \begin{lstlisting}
  letrec f = \a -> \b -> f a c
  in f x
  \end{lstlisting}
  \item Next, inline any argument that stays constant for every invocation of the function inside of its definition. The example could result in:
  \begin{lstlisting}
  letrec f = \a -> \b -> f x c
  in f x
  \end{lstlisting}
\end{itemize}

Currently, the specialization pass is unverified, though the current methodology allows for it to be proven correct. The implementation level proof for inlining also makes it easy for the specialization proof to be introduced.

\section{Implementation}
\label{verified_specialization:implementation}
%

The specialization is not implemented as a separate pass. Instead, it is simply a transformation function that is used by the inlining pass. The function is defined as follows:

\begin{definition}
%
\begin{holthmenv}
  \HOLthm[def,width=60]{pure_letrec_spec_cexp.spec_def}
\end{holthmenv}
%
\end{definition}

This function takes:
\begin{enumerate}
  \item The \keyword{f} name of the \keyword{letrec} to specialize.
  \item Arguments \keyword{args}, the function is called with.
  \item The body of the \keyword{letrec}.
\end{enumerate}

The output of this function is the specialized version of the provided \keyword{letrec} body.

The specialization can only be performed on \keyword{letrec}s with bodies that are top-level lambda abstractions, otherwise there are no arguments to specialize. The function works in the following steps:
\begin{enumerate}
  \item It uses \keyword{const_call_args} to find for all "constant arguments" --- arguments of \keyword{f} that are always only called with the references to themselves in recursive calls to \keyword{f}. The implementation of this function is shown in Figure \ref{fig:const_call_args_implementation}. This function takes the name of the \keyword{Letrec}, the names of its top-level arguments and the body of the \keyword{Letrec}.
  \item It then computes a lookup for all "constant arguments" and their appropriate values in \keyword{args}. This lookup is then used to substitute the constant arguments with their values in the body of the specialized \keyword{letrec}.
  \item If the lookup is empty, no specialization is performed. Otherwise, it performs substitution of the constant arguments with their values inside of the provided \keyword{Letrec} body.
  \item The result of the function is the specialized body of the \keyword{Letrec}.
\end{enumerate}

Considering the following example:

\begin{lstlisting}
letrec sum_map_to = \n -> \f -> case n of
  0 -> 0
  n -> f n + sum_map_to (n - 1) f
in
  sum_map_to 10 (\x -> x + 1)
\end{lstlisting}

The specialization algorithm will:
\begin{enumerate}
  \item Search the body of \keyword{sum_map_to} for constant arguments. In this case, it will find that \keyword{f} is a "constant argument" and \keyword{n} is not. This is because \keyword{f} is only positionally called as itself in recursive calls, whereas \keyword{n} is called as \keyword{n - 1}.
  \item It will then compute a lookup for the constant arguments. In this case, it will be \keyword{[f -> (\\x -> x + 1)]}.
  \item Finally, it will substitute the constant arguments with their values.
\end{enumerate}

When called within the inlining pass, the result will be:

\begin{lstlisting}
letrec sum_map_to = \n -> \f -> case n of
  0 -> 0
  n -> f n + sum_map_to (n - 1) f
in
  letrec sum_map_to = \n -> \f -> case n of
    0 -> 0
    n -> f n + sum_map_to (n - 1) (\x -> x + 1)
  in 
    sum_map_to 10 (\x -> x + 1)
\end{lstlisting}

\begin{figure}
%
\begin{definition}
%
Function computing the "constant arguments" of a \keyword{Letrec}
%
\begin{holthmenv}
  \HOLthm[def,width=85]{pure_letrec_spec_cexp.const_call_args_def}
\end{holthmenv}
%
\end{definition}
%
\caption{\keyword{const_call_args} function implementation}
\label{fig:const_call_args_implementation}
\end{figure}
