\chapter{Results}
\label{results}
%

This chapter summarises and evaluates the results obtained in this project. It provides details on the correctness of the pass, as well as the benchmarks showing its quantitative results.

\section{Correctness Proof}
\label{results:correctness_proof}
%

The correctness of inlining has been proven on two levels: the relation level and the implementation level. The relation-level proof is independent of the implementation, and it proves that any inlining pass that satisfies the same transformation schema preserves the semantics of the input program. The implementation-level proof is specific to the inlining pass implementation and proves that the implementation is correct. The correctness proofs of inlining are the main results of this project. They are:

Firstly, the correctness of the relation that encaptures the semantic transformation of the inlining pass:

\begin{theorem}
%
\begin{HOLmath}
  \HOLthm[]{pure_inline.list_subst_rel_IMP_exp_eq_specialized}
\end{HOLmath}
%
\end{theorem}

The equivalence proof for the multi-inlining relation is the most important part of the work. This proof establishes that the multi-inlining relation preserves the semantics of the original program. And because the multi-inlining relation encodes the transformation performed by the inlining pass, this theorem proves the correctness of inlining as a concept.

Secondly, the correctness of the inlining pass implementation:

\begin{theorem}
%
\begin{HOLmath}
  \HOLthm[]{pure_inline_cexpProof.inline_all_thm}
\end{HOLmath}
%
\end{theorem}

This theorem establishes the correctness of the full inlining pass. Like the relation-level proof, this theorem is defined for any expression that satisfies no_shadowing and is closed. It's derived from the equivalence theorem for the relation, thereby providing a thorough proof of the full inlining pass.

Together those two theorems prove that the inlining pass does not alter the semantics of the input program.

\section{Implemented Optimization Pass}
\label{results:implemented_optimization_pass}
%

The inlining pass was implemented in HOL4. The implementation is based on the formalization of the inlining relation. The implementation can be split into two distinctive parts: the inlining pass and the specialization function. The inlining pass is the main part of the implementation. It is responsible for traversing the AST and applying the inlining relation to each expression. The specialization transformation is a function that takes a \lstinline{letrec} definition and a list of arguments and returns a specialized version of the definition. This function is used by the inlining pass to create specialized versions of \lstinline{letrec} definitions.

There are two versions of the inlining pass: the fully verified version and the partially verified version. The fully verified version doesn't use the specialization transformation. It also doesn't recurse into the inserted expressions, due to the freshening function not being verified. The partially verified version uses both the specialization transformation and the freshening function. It is capable of inlining inside the inserted expressions and of inlining specialized recursive functions.

\section{Examples}
\label{results:examles}

To showcase the capabilities of the inlining pass, a few examples are provided. These examples were transformed using the partially unverified pass. This version of the pass is unverified since it uses both the specialization transformation and the freshening function to inline inside the inserted expressions.

Example 1 -- simple inlining of a constant:

\begin{lstlisting}
let x = 7
in (\m -> x)
\end{lstlisting}

The expression after inlining:

\begin{lstlisting}
let x = 7
in (\m -> 7)
\end{lstlisting}

This example shows the simplest case of inlining. The inlining pass simply replaces the variable \lstinline{x} with its value \lstinline{7}.

Example 2 -- transitively inlining let bindings:

\begin{lstlisting}
let f = (\x -> x + 5)
in let y = f 1
in 1 + y
\end{lstlisting}

The expression after inlining:

\begin{lstlisting}
let f = (lam (x) (+ x (int 5)))
in let y = (let x = 1 in 1 + 5)
in 1 + (let x = 1 in 1 + 5)
\end{lstlisting}

This example shows the inlining of a let binding \lstinline{f} that is used in another let binding \lstinline{y}. The inlining pass first inlines the definition of \lstinline{f}, which in turn creates a new let binding for \lstinline{x}. Both of those bindings are then inlined into the reference of \lstinline{y} in the resulting expression.

This showcases the inlining pass's ability to inline let bindings transitively. And continue with inlining inside of an inserted expression.

A thing of note in the above example is that the inlining pass paved the way for other optimizations to be applied. In this case, dead code elimination can remove both bindings for \lstinline{x}. This would allow for the constant value to be computed at compile time by yet another optimization pass.

Example 3 -- specialization:

\begin{lstlisting}
letrec map = \f -> \lst -> case lst of
  [] -> []
  (x:xs) -> f x : map f xs
in
  let foo = (\x -> x + 1) 
  in map foo
\end{lstlisting}

The expression after inlining:

\begin{lstlisting}
letrec map = \f -> \lst -> case lst of
  [] -> []
  (x:xs) -> f x : map f xs
in
  let foo = (\x -> x + 1) 
  in 
    letrec map = \f -> \lst -> case lst of
      [] -> []
      (x:xs) -> foo x : map foo xs
    in map foo
\end{lstlisting}

This example showcases the inlining pass's ability to specialize recursive functions. The inlining pass first inlines the definition of \lstinline{map} into its reference. It then specializes the definition of \lstinline{map} by replacing the argument \lstinline{f} with the specialized version \lstinline{foo}.

Note that the specialization algorithm only specializes in the definition of \lstinline{map}, without removing the original argument. This optimization of removing unused bindings can be performed by another optimization pass, similar to dead code elimination.
